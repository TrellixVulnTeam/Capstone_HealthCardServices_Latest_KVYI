{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/simvi/Desktop/Capstone Project/Capstone_HealthCardServices_Latest/FrontEnd/HealthCardServices-FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UpdateAccountInfoComponent } from './update-account-info.component';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ToastrModule } from 'ngx-toastr';\ndescribe('UpdateAccountInfoComponent', () => {\n  let component;\n  let fixture;\n  let injector;\n  let service;\n  let httpMock;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, HttpClientTestingModule, FormsModule, ToastrModule.forRoot()],\n      declarations: [UpdateAccountInfoComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UpdateAccountInfoComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  /*\r\n      beforeEach(() => {\r\n    injector = getTestBed();\r\n    service = injector.get(UpdateAccountInfoComponent);\r\n    httpMock = injector.get(HttpTestingController);\r\n  });\r\n      afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n      /*\r\n  it('should return an Observable<SearchResults>', () => {\r\n    service.OnSubmit('users', dummyParams)\r\n      .subscribe(result => {\r\n        expect(result.items.length).toBe(2);\r\n      });\r\n  \r\n    const req = httpMock.expectOne(`${service.API_URL}/search/users?q=cironunes`);\r\n    expect(req.request.url).toBe(`${service.API_URL}/search/users`);\r\n    expect(req.request.params).toEqual(dummyParams);\r\n  \r\n    req.flush({\r\n      incomplete_results: false,\r\n      items: [{}, {}],\r\n      total_count: 2\r\n    });\r\n  });\r\n  */\n});","map":{"version":3,"sources":["C:\\Users\\simvi\\Desktop\\Capstone Project\\Capstone_HealthCardServices_Latest\\FrontEnd\\HealthCardServices-FrontEnd\\src\\app\\components\\update-account-info\\update-account-info.component.spec.ts"],"names":[],"mappings":";AAAA,SAAuC,OAAvC,QAAsD,uBAAtD;AACA,SAAS,WAAT,EAAsB,mBAAtB,QAAiD,gBAAjD;AACA,SAAS,0BAAT,QAA2C,iCAA3C;AACA,SAAS,uBAAT,QAA+D,8BAA/D;AACA,SAAS,YAAT,QAA6B,YAA7B;AAGA,QAAQ,CAAC,4BAAD,EAA+B,MAAK;AAC1C,MAAI,SAAJ;AACA,MAAI,OAAJ;AACA,MAAI,QAAJ;AACA,MAAI,OAAJ;AACA,MAAI,QAAJ;AAIA,EAAA,UAAU,iCAAC,aAAW;AACpB,UAAM,OAAO,CAAC,sBAAR,CAA+B;AACnC,MAAA,OAAO,EAAE,CACP,mBADO,EAEP,uBAFO,EAGP,WAHO,EAIP,YAAY,CAAC,OAAb,EAJO,CAD0B;AAOnC,MAAA,YAAY,EAAE,CAAE,0BAAF;AAPqB,KAA/B,EASL,iBATK,EAAN;AAUD,GAXS,EAAV;AAaA,EAAA,UAAU,CAAC,MAAK;AACd,IAAA,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,0BAAxB,CAAV;AACA,IAAA,SAAS,GAAG,OAAO,CAAC,iBAApB;AACA,IAAA,OAAO,CAAC,aAAR;AACD,GAJS,CAAV;AAMA,EAAA,EAAE,CAAC,eAAD,EAAkB,MAAK;AACvB,IAAA,MAAM,CAAC,SAAD,CAAN,CAAkB,UAAlB;AACD,GAFC,CAAF;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BD,CA/DO,CAAR","sourcesContent":["import { ComponentFixture, getTestBed, TestBed } from '@angular/core/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UpdateAccountInfoComponent } from './update-account-info.component';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\ndescribe('UpdateAccountInfoComponent', () => {\r\n  let component: UpdateAccountInfoComponent;\r\n  let fixture: ComponentFixture<UpdateAccountInfoComponent>;\r\n  let injector: TestBed;\r\n  let service: UpdateAccountInfoComponent;\r\n  let httpMock: HttpTestingController; \r\n\r\n  \r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        ReactiveFormsModule,\r\n        HttpClientTestingModule,\r\n        FormsModule,\r\n        ToastrModule.forRoot()\r\n      ],\r\n      declarations: [ UpdateAccountInfoComponent ]\r\n    })\r\n    .compileComponents();\r\n  });\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(UpdateAccountInfoComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  /*\r\n\r\n  beforeEach(() => {  \r\n    injector = getTestBed();\r\n    service = injector.get(UpdateAccountInfoComponent);\r\n    httpMock = injector.get(HttpTestingController);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  /*\r\n  it('should return an Observable<SearchResults>', () => {\r\n    service.OnSubmit('users', dummyParams)\r\n      .subscribe(result => {\r\n        expect(result.items.length).toBe(2);\r\n      });\r\n  \r\n    const req = httpMock.expectOne(`${service.API_URL}/search/users?q=cironunes`);\r\n    expect(req.request.url).toBe(`${service.API_URL}/search/users`);\r\n    expect(req.request.params).toEqual(dummyParams);\r\n  \r\n    req.flush({\r\n      incomplete_results: false,\r\n      items: [{}, {}],\r\n      total_count: 2\r\n    });\r\n  });\r\n  */\r\n\r\n});\r\n\r\n\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}